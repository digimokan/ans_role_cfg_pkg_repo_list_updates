#!/bin/sh
# vim: set filetype=sh:

################################################################################
# purpose:   update Arch Linux mirrors list, and do system upgrade
# args/opts: see usage (run with -h option)
# meta:      script installed by ansible {{ role_name | basename }}
################################################################################

# GLOBAL VARS:

# User Selection Options
dryrun_system_upgrade='false'
backup_mirrorlist='false'
mirrors_update='false'
force_mirrors_update='false'
reinstall_keyring='false'
system_upgrade='false'

# Paths And Commands
mirrors_path='/etc/pacman.d/mirrorlist'
mirrors_bkup_path='/etc/pacman.d/mirrorlist.abkup'
keyring_pkg_name='archlinux-keyring'
# NOTE: archwiki specifically recommends these system-upgrade opts:
# https://wiki.archlinux.org/index.php/Mirrors#Force_pacman_to_refresh_the_package_lists
sys_upgrade_opts='Syyuu'

print_usage() {
  echo 'USAGE:'
  echo "  $(basename "${0}")        -h"
  echo "  $(basename "${0}")        -n"
  echo "  sudo  $(basename "${0}")  [-b]  [-m]  [-k]  -s"
  echo 'OPTIONS:'
  echo '  -h, --help'
  echo '      print this help message'
  echo '  -n, --dryrun-system-upgrade'
  echo '      list packages that would be upgraded, then exit'
  echo '  -b, --backup-mirrorlist'
  echo '      create backup copy of system mirrorlist'
  echo '  -m, --mirrorlist-update'
  echo '      update system mirrorlist of package servers'
  echo '  -k, --reinstall-archlinux-keyring'
  echo '      if sysupgrade key errors, try again with this opt'
  echo '  -s, --system-upgrade'
  echo '      upgrade all system packages from official repos'
  echo 'EXIT CODES:'
  echo '    0  ok'
  echo '    1  usage, arguments, or options error'
  echo '    5  mirrors update error'
  echo '   10  system upgrade error'
  echo '  255  unknown error'
  exit "${1}"
}

get_cmd_opts() {
  while getopts ':hnbmMks-:' option; do
    case "${option}" in
      h)  handle_help ;;
      n)  handle_dryrun_system_upgrade ;;
      b)  handle_backup_mirrorlist ;;
      m)  handle_mirrorlist_update ;;
      M)  handle_force_mirrorlist_update ;;
      k)  handle_reinstall_keyring ;;
      s)  handle_system_upgrade ;;
      -)  case ${OPTARG} in
            help)                        handle_help ;;
            help=*)                      handle_illegal_option_arg "${OPTARG}" ;;
            dryrun-system-upgrade)       handle_dryrun_system_upgrade ;;
            dryrun-system-upgrade=*)     handle_illegal_option_arg "${OPTARG}" ;;
            backup-mirrorlist)           handle_backup_mirrorlist ;;
            backup-mirrorlist=*)         handle_illegal_option_arg "${OPTARG}" ;;
            mirrorlist-update)           handle_mirrorlist_update ;;
            mirrorlist-update=*)         handle_illegal_option_arg "${OPTARG}" ;;
            reinstall-keyring)           handle_reinstall_keyring ;;
            reinstall-keyring=*)         handle_illegal_option_arg "${OPTARG}" ;;
            system-upgrade)              handle_system_upgrade ;;
            system-upgrade=*)            handle_illegal_option_arg "${OPTARG}" ;;
            '')                          break ;; # non-option arg starting with '-'
            *)                           handle_unknown_option "${OPTARG}" ;;
          esac ;;
      \?) handle_unknown_option "${OPTARG}" ;;
    esac
  done
}

handle_help() {
  print_usage 0
}

handle_dryrun_system_upgrade() {
  dryrun_system_upgrade='true'
}

handle_backup_mirrorlist() {
  backup_mirrorlist='true'
}

handle_mirrorlist_update() {
  mirrors_update='true'
}

handle_force_mirrorlist_update() {
  force_mirrors_update='true'
}

handle_reinstall_keyring() {
  reinstall_keyring='true'
}

handle_system_upgrade() {
  system_upgrade='true'
}

handle_unknown_option() {
  err_msg="unknown option \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

handle_illegal_option_arg() {
  err_msg="illegal argument in \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

print_err_msg() {
  echo 'ERROR:'
  printf "$(basename "${0}"): %s\\n\\n" "${1}"
}

quit_err_msg() {
  print_err_msg "${1}"
  exit "${2}"
}

quit_err_msg_with_help() {
  print_err_msg "${1}"
  print_usage "${2}"
}

check_option_conflicts() {
  if [ "${mirrors_update}" = 'true' ] && [ "${system_upgrade}" = 'false' ]; then
    # WARNING: archwiki recommends against updating mirrors without sysupgrade:
    # https://wiki.archlinux.org/index.php/Mirrors#Force_pacman_to_refresh_the_package_lists
    quit_err_msg_with_help "Per ArchWiki, don't update mirrors without sysupgrade. Override with '-M' option" 1
  fi
}

check_running_as_root() {
  if [ "$(id -u)" != "0" ]; then
    quit_err_msg_with_help "must run this script as root" 1
  fi
}

do_dryrun_system_upgrade() {
  checkupdates
  exit_code="${?}"
  if [ "${exit_code}" = 0 ]; then
    exit 0
  else
    quit_err_msg "${keyring_pkg_name} system upgrade dryrun failure" 10
  fi
}

do_backup_mirrorlist() {
  echo "Saving backup mirrorlist copy at '${mirrors_bkup_path}'..."
  cp "${mirrors_path}" "${mirrors_bkup_path}"
}

do_mirrors_update() {
  echo 'Updating mirror list with reflector...'
  # shellcheck disable=SC1083
  reflector {{ repo_update_params }} --save "${mirrors_path}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg "mirrors update failure" 5
  fi
}

do_reinstall_keyring() {
  echo "Reinstalling keyring with 'pacman -S ${keyring_pkg_name}'..."
  pacman -S "${keyring_pkg_name}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg "${keyring_pkg_name} package upgrade failure" 10
  fi
}

do_system_upgrade() {
  echo "Upgrading system with 'pacman -${sys_upgrade_opts}'..."
  pacman -"${sys_upgrade_opts}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg "system upgrade failure" 10
  fi
}

main() {
  get_cmd_opts "$@"
  check_option_conflicts "$@"
  if [ "${dryrun_system_upgrade}" = 'true' ]; then
    do_dryrun_system_upgrade "$@"
  fi
  check_running_as_root "$@"
  if [ "${backup_mirrorlist}" = 'true' ]; then
    do_backup_mirrorlist "$@"
  fi
  if [ "${mirrors_update}" = 'true' ] || [ "${force_mirrors_update}" = 'true' ]; then
    do_mirrors_update "$@"
  fi
  if [ "${reinstall_keyring}" = 'true' ]; then
    do_reinstall_keyring "$@"
  fi
  if [ "${system_upgrade}" = 'true' ]; then
    do_system_upgrade "$@"
  fi
  exit 0
}

main "$@"

