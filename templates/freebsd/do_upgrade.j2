#!/bin/sh
# vim: set filetype=sh:

################################################################################
# purpose:   update FreeBSD packages and base system to new boot environments
# args/opts: see usage (run with -h option)
# meta:      script installed by ansible {{ role_name | basename }}
# refs:      https://klarasystems.com/articles/managing-boot-environments/
################################################################################

# GLOBAL VARS:

# User Selection Options
upgrade_packages='false'
force_reinstall_packages='false'
upgrade_system_patches='false'
upgrade_system_to_release='false'
uninstall_orphan_packages='false'
delete_cache_packages='false'
dry_run='false'

# upgrade boot environment base name
boot_env_basename='upgrade_'$(date +%Y_%m_%d_%H%M)

print_usage() {
  echo 'USAGE:'
  echo "  $(basename "${0}")        -h"
  echo "  sudo  $(basename "${0}")  -p  [-n]"
  echo "  sudo  $(basename "${0}")  -p  -f"
  echo "  sudo  $(basename "${0}")  -t  [-n]"
  echo "  sudo  $(basename "${0}")  -r <release_vers>"
  echo "  sudo  $(basename "${0}")  -o  [-n]"
  echo "  sudo  $(basename "${0}")  -c  [-n]"
  echo 'OPTIONS:'
  echo '  -h, --help'
  echo '      print this help message'
  echo '  -p, --upgrade-packages'
  echo '      upgrade all installed packages'
  echo '  -f, --force-reinstall-packages'
  echo '      reinstall all packages (necessary after upgrade-system-to-release)'
  echo '  -t, --upgrade-system-patches'
  echo '      upgrade base system with patches'
  echo '  -r <release_vers>, --upgrade-system-to-release=<release_vers>'
  echo '      upgrade base system to new release (release_vers 14.0, 15.1, etc)'
  echo '  -o, --uninstall-orphan-packages'
  echo '      uninstall all orphan pkgs (installed as deps, now not required)'
  echo '  -c, --delete-cache-packages'
  echo '      delete old pkg versions from the cache'
  echo '  -n, --dry-run'
  echo '      do not take any action, only show what would be done'
  echo 'EXIT CODES:'
  echo '    0  ok'
  echo '    1  usage, arguments, or options error'
  echo '    5  boot environment error'
  echo '   10  update, upgrade, or removal error'
  echo '  255  unknown error'
  exit "${1}"
}

get_cmd_opts() {
  while getopts ':hpftr:ocn-:' option; do
    case "${option}" in
      h)  handle_help ;;
      p)  handle_upgrade_packages ;;
      f)  handle_force_reinstall_packages ;;
      t)  handle_upgrade_system_patches ;;
      r)  handle_upgrade_system_to_release "${OPTARG}" ;;
      o)  handle_uninstall_orphan_packages ;;
      c)  handle_delete_cache_packages ;;
      n)  handle_dry_run ;;
      -)  LONG_OPTARG="${OPTARG#*=}"
          case ${OPTARG} in
            help)                          handle_help ;;
            help=*)                        handle_illegal_option_arg "${OPTARG}" ;;
            upgrade-packages)              handle_upgrade_packages ;;
            upgrade-packages=*)            handle_illegal_option_arg "${OPTARG}" ;;
            force-reinstall-packages)      handle_force_reinstall_packages ;;
            force-reinstall-packages=*)    handle_illegal_option_arg "${OPTARG}" ;;
            upgrade-system-patches)        handle_upgrade_system_patches ;;
            upgrade-system-patches=*)      handle_illegal_option_arg "${OPTARG}" ;;
            upgrade-system-to-release=?*)  handle_upgrade_system_to_release "${LONG_OPTARG}" ;;
            upgrade-system-to-release*)    handle_missing_option_arg "${OPTARG}" ;;
            uninstall-orphan-packages)     handle_uninstall_orphan_packages ;;
            uninstall-orphan-packages=*)   handle_illegal_option_arg "${OPTARG}" ;;
            delete-cache-packages)         handle_delete_cache_packages ;;
            delete-cache-packages=*)       handle_illegal_option_arg "${OPTARG}" ;;
            dry-run)                       handle_dry_run ;;
            dry-run=*)                     handle_illegal_option_arg "${OPTARG}" ;;
            '')                            break ;; # non-option arg starting with '-'
            *)                             handle_unknown_option "${OPTARG}" ;;
          esac ;;
      \?) handle_unknown_option "${OPTARG}" ;;
    esac
  done
}

handle_help() {
  print_usage 0
}

handle_upgrade_packages() {
  if [ "${upgrade_system_patches}" = 'true' ] || \
     [ "${upgrade_system_to_release}" = 'true' ] || \
     [ "${uninstall_orphan_packages}" = 'true' ] || \
     [ "${delete_cache_packages}" = 'true' ]; then
    quit_err_msg_with_help "Mutually exclusive options selected" 1
  fi
  upgrade_packages='true'
}

handle_force_reinstall_packages() {
  if [ "${upgrade_system_patches}" = 'true' ] || \
     [ "${upgrade_system_to_release}" = 'true' ] || \
     [ "${uninstall_orphan_packages}" = 'true' ] || \
     [ "${delete_cache_packages}" = 'true' ] || \
     [ "${dry_run}" = 'true' ]; then
    quit_err_msg_with_help "Mutually exclusive options selected" 1
  fi
  force_reinstall_packages='true'
}

handle_upgrade_system_patches() {
  if [ "${upgrade_packages}" = 'true' ] || \
     [ "${upgrade_system_to_release}" = 'true' ] || \
     [ "${uninstall_orphan_packages}" = 'true' ] || \
     [ "${delete_cache_packages}" = 'true' ]; then
    quit_err_msg_with_help "Mutually exclusive options selected" 1
  fi
  upgrade_system_patches='true'
}

handle_upgrade_system_to_release() {
  if [ "${upgrade_packages}" = 'true' ] || \
     [ "${upgrade_system_patches}" = 'true' ] || \
     [ "${uninstall_orphan_packages}" = 'true' ] || \
     [ "${delete_cache_packages}" = 'true' ] || \
     [ "${dry_run}" = 'true' ]; then
    quit_err_msg_with_help "Mutually exclusive options selected" 1
  fi
  upgrade_system_to_release='true'
  release_vers="${1}"
}

handle_uninstall_orphan_packages() {
  if [ "${upgrade_packages}" = 'true' ] || \
     [ "${upgrade_system_patches}" = 'true' ] || \
     [ "${upgrade_system_to_release}" = 'true' ] || \
     [ "${delete_cache_packages}" = 'true' ]; then
    quit_err_msg_with_help "Mutually exclusive options selected" 1
  fi
  uninstall_orphan_packages='true'
}

handle_delete_cache_packages() {
  if [ "${upgrade_packages}" = 'true' ] || \
     [ "${upgrade_system_patches}" = 'true' ] || \
     [ "${upgrade_system_to_release}" = 'true' ] || \
     [ "${uninstall_orphan_packages}" = 'true' ]; then
    quit_err_msg_with_help "Mutually exclusive options selected" 1
  fi
  delete_cache_packages='true'
}

handle_dry_run() {
  if [ "${upgrade_system_to_release}" = 'true' ] || \
     [ "${force_reinstall_packages}" = 'true' ]; then
    quit_err_msg_with_help "Mutually exclusive options selected" 1
  fi
  dry_run='true'
}

handle_unknown_option() {
  err_msg="unknown option \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

handle_illegal_option_arg() {
  err_msg="illegal argument in \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

handle_missing_option_arg() {
  err_msg="missing argument for option \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

print_err_msg() {
  echo 'ERROR:'
  printf "$(basename "${0}"): %s\\n\\n" "${1}"
}

quit_err_msg() {
  print_err_msg "${1}"
  exit "${2}"
}

quit_err_msg_with_help() {
  print_err_msg "${1}"
  print_usage "${2}"
}

check_running_as_root() {
  if [ "$(id -u)" != "0" ]; then
    quit_err_msg_with_help "must run this script as root" 1
  fi
}

quit_rem_be_if_rc_not_0() {
  cmd_exit_code="${1}"
  err_msg="${2}"
  script_exit_code="${3}"
  if [ "${cmd_exit_code}" != 0 ]; then
    bectl unmount "${boot_env_fullname}" > /dev/null 2>&1
    bectl destroy "${boot_env_fullname}" > /dev/null 2>&1
    quit_err_msg "${err_msg}" "${script_exit_code}"
  fi
}

delete_local_base_system_db() {
  rm -rf /var/db/freebsd-update/*
}

mount_boot_env() {
  boot_env_fullname="${1}"

  # create the boot environment
  bectl create "${boot_env_fullname}"
  quit_rem_be_if_rc_not_0 "${?}" "boot environment creation failure" 5

  # mount the boot environment, save boot_env_mountpoint for caller
  echo "mounting new boot environment '${boot_env_fullname}'..."
  mount_info=$(bectl mount "${boot_env_fullname}")
  quit_rem_be_if_rc_not_0 "${?}" "boot environment mount failure" 5
  boot_env_mountpoint=$(echo "${mount_info}" | awk '{print $NF}')
}

do_upgrade_packages() {
  # if doing a dry-run, do dry-run, and exit
  if [ "${dry_run}" = 'true' ]; then
    echo "Doing dry-run upgrade of all packages with 'pkg upgrade --dry-run'..."
    pkg upgrade --dry-run
    exit 0
  fi

  # check if any updates available - if not, exit
  if [ "${force_reinstall_packages}" = 'false' ]; then
    pkg_check_stdout=$(pkg upgrade --dry-run --quiet)
    if [ "${pkg_check_stdout}" = '' ]; then
      echo "All packages are up to date. Nothing to do."
      exit 0
    fi
  fi

  # updates ARE available, so create a new boot environment for them
  mount_boot_env "${boot_env_basename}_packages"

  # update local package repo database in the new BE
  echo "Updating local package repo with 'pkg -r ${boot_env_mountpoint} update -f'..."
  pkg -r "${boot_env_mountpoint}" update -f
  quit_rem_be_if_rc_not_0 "${?}" "local package repo update failure" 10

  # upgrade all packages into the new BE
  if [ "${force_reinstall_packages}" = 'true' ]; then run_forced='-f '; else run_forced=''; fi
  echo "Upgrading all packages with 'pkg -r ${run_forced}${boot_env_mountpoint} upgrade'..."
  pkg -r "${run_forced}""${boot_env_mountpoint}" upgrade
  quit_rem_be_if_rc_not_0 "${?}" "package upgrade operation failure" 10
  echo "Package upgrades complete. Boot into ${boot_env_fullname}, and run 'pkg audit --fetch'."
}

do_upgrade_system_patches() {
  # delete base-system-db, so that it won't be used for initial fetch
  delete_local_base_system_db

  # attempt initial base-system-patch fetch, just to check if patches available
  freebsd-update fetch
  quit_rem_be_if_rc_not_0 "${?}" "base-system-patch fetch failure" 10

  freebsd-update updatesready
  exit_code="${?}"
  if [ "${dry_run}" = 'true' ] && [ "${exit_code}" = 2 ]; then
    echo "Dry-run complete. Base system is up to date. No patches to apply."
    exit 0
  elif [ "${exit_code}" = 2 ]; then
    echo "Base system is up to date. No patches to apply."
    exit 0
  elif [ "${dry_run}" = 'true' ]; then
    echo "Dry-run complete. Base system patches available to fetch and install."
    exit 0
  fi

  # delete base-system-db in current BE, so that it won't be used
  delete_local_base_system_db

  # base-system patches ARE available, so create a new boot environment for them
  mount_boot_env "${boot_env_basename}_syspatches"

  # fetch the available base-system patches into the new BE
  echo "Fetching base system patches with 'freebsd-update -b ${boot_env_mountpoint} -d ${boot_env_mountpoint}/var/db/freebsd-update fetch'..."
  freebsd-update -b "${boot_env_mountpoint}" -d "${boot_env_mountpoint}/var/db/freebsd-update" fetch
  quit_rem_be_if_rc_not_0 "${?}" "base-system-patch fetch failure" 10

  # install the fetched base-system patches into the new BE
  echo "Installing base system patches with 'freebsd-update -b ${boot_env_mountpoint} -d ${boot_env_mountpoint}/var/db/freebsd-update install'..."
  freebsd-update -b "${boot_env_mountpoint}" -d "${boot_env_mountpoint}/var/db/freebsd-update" install
  quit_rem_be_if_rc_not_0 "${?}" "base-system-patch install failure" 10
  current_vers=$(freebsd-version -u)
  echo "Base system patches to ${current_vers} complete. Boot into ${boot_env_fullname}, and check 'freebsd-version -u'."
}

do_upgrade_system_to_release() {
  # delete base-system-db in current BE, so that it won't be used
  delete_local_base_system_db

  mount_boot_env "${boot_env_basename}_release"

  # fetch and merge-compare the new release into the new BE
  echo "Fetching and merge-comparing new release with 'freebsd-update -b ${boot_env_mountpoint} -d ${boot_env_mountpoint}/var/db/freebsd-update -r ${release_vers}-RELEASE upgrade'..."
  freebsd-update -b "${boot_env_mountpoint}" -d "${boot_env_mountpoint}/var/db/freebsd-update" -r "${release_vers}-RELEASE" upgrade
  quit_rem_be_if_rc_not_0 "${?}" "release fetch or merge-compare failure" 10

  # install the new release into the new BE
  echo "Installing new release with 'freebsd-update -b ${boot_env_mountpoint} -d ${boot_env_mountpoint}/var/db/freebsd-update -r ${release_vers}-RELEASE install'..."
  freebsd-update -b "${boot_env_mountpoint}" -d "${boot_env_mountpoint}/var/db/freebsd-update" -r "${release_vers}-RELEASE" install
  quit_rem_be_if_rc_not_0 "${?}" "release install failure" 10
  echo "First-stage install complete. Boot into ${boot_env_fullname}. Run 'freebsd-update install' again. Then run this script with '-p -f' options."
}

do_uninstall_orphan_packages() {
  if [ "${dry_run}" = 'true' ]; then
    echo "Doing dry-run of orphan-packages-uninstall with 'pkg autoremove --dry-run'..."
    pkg autoremove --dry-run
  else
    echo "Doing orphan-packages-uninstall with 'pkg autoremove'..."
    pkg autoremove
    quit_rem_be_if_rc_not_0 "${?}" "orphan packages autoremove failure" 10
  fi
}

do_delete_cache_packages() {
  if [ "${dry_run}" = 'true' ]; then
    echo "Doing dry-run of cached-packages-delete with 'pkg clean --dry-run'..."
    pkg clean --dry-run
  else
    echo "Doing cached-packages-delete with 'pkg clean'..."
    pkg clean
    quit_rem_be_if_rc_not_0 "${?}" "cached packages delete failure" 10
  fi
}

main() {
  get_cmd_opts "$@"
  check_running_as_root "$@"
  if [ "${upgrade_packages}" = 'true' ]; then
    do_upgrade_packages "$@"
  elif [ "${upgrade_system_patches}" = 'true' ]; then
    do_upgrade_system_patches "$@"
  elif [ "${upgrade_system_to_release}" = 'true' ]; then
    do_upgrade_system_to_release "$@"
  elif [ "${uninstall_orphan_packages}" = 'true' ]; then
    do_uninstall_orphan_packages "$@"
  elif [ "${delete_cache_packages}" = 'true' ]; then
    do_delete_cache_packages "$@"
  else
    quit_err_msg_with_help "no valid option selected" 1
  fi

  exit 0
}

main "$@"

